parameters:
  job:
    name: ''
    displayName: ''
  pool: ''
  build:
    configuration: 'Release'
  sonar:
    enabled: True

jobs:
- job: ${{ parameters.job.name }}
  displayName: ${{ parameters.job.displayName }}
  continueOnError: False
  pool: ${{ parameters.pool }}
  workspace:
    clean: all
  steps:
  # Install specific .NET Core SDK version.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=vsts.
  # Installing a specific .NET Core SDK version is needed to avoid installing a .NET Core global tool in a following task and then have Azure DevOps complain that it cannot find it.
  # This issue is documented here: https://github.com/Microsoft/azure-pipelines-tasks/issues/8291.
  - task: DotNetCoreInstaller@0
    displayName: Install .NET Core SDK
    name: install_dotnetcore_sdk
    enabled: True
    inputs:
      packageType: 'sdk'
      version: $(DotNetCore_SDK_Version)

  # Install sonarscanner tool to be able to perform a SonarQube analysis.
  # See more here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild.
  # See more about "script" step here: https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/cross-platform-scripting?view=vsts&tabs=yaml
  # and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/command-line?view=vsts&tabs=yaml#yaml-snippet.
  - script: >-
      dotnet tool install dotnet-sonarscanner 
      --global 
      --version $(SonarScanner_Version)
    displayName: Install SonarQube static code analyzing CLI tool
    name: install_sonarscanner
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)
    enabled: ${{ parameters.sonar.enabled }}

  # Prepare SonarQube analysis.
  # See more here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild.
  # The analysis will make use of the branch name via the "sonar.branch.name" command parameter.
  # See more here: https://sonarcloud.io/documentation/branches/overview/#analysis.
  # The long line has been splitted using "block chomping indicator", as documented here: https://stackoverflow.com/a/3790497.
  - script: >-
      dotnet-sonarscanner begin 
      /k:"$(SonarProjectKey)" 
      /s:"$(Build.SourcesDirectory)/Build/SonarQubeAnalysis.xml" 
      /d:sonar.login="$(SonarLogin)" 
      /d:sonar.branch.name="$(Build.SourceBranchName)"
      /d:sonar.projectVersion="$(Date:yyyyMMdd).$(Rev:rrr)"
    displayName: Prepare SonarQube analysis
    name: prepare_sonarqube_analysis
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)    
    enabled: ${{ parameters.sonar.enabled }}

  # Compile source code.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/build/dotnet-core-cli?view=vsts.
  - script: >-
      dotnet build $(Build.SourcesDirectory)/Todo.sln 
      --configuration ${{ parameters.build.configuration }}
    displayName: Build sources
    name: build_sources
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)
    enabled: True

  # Run unit tests.
  # See more about running selective tests here: https://docs.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests#xunit.
  - script: >-
      dotnet test $(Build.SourcesDirectory)/Todo.sln 
      --no-build
      --configuration ${{ parameters.build.configuration }} 
      --filter "FullyQualifiedName~UnitTests" 
      --test-adapter-path "." 
      --logger "xunit;LogFilePath=TodoWebApp.UnitTests.xunit.xml" 
      /p:CollectCoverage=True 
      /p:CoverletOutputFormat=opencover 
      /p:CoverletOutput="TodoWebApp.UnitTests.opencover.xml" 
      /p:Exclude="[xunit.*]*"
    displayName: Run unit tests
    name: run_unit_tests
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)    
    enabled: True

  # Run integration tests.
  - script: >-
      dotnet test $(Build.SourcesDirectory)/Todo.sln 
      --no-build
      --configuration ${{ parameters.build.configuration }} 
      --filter "FullyQualifiedName~IntegrationTests" 
      --test-adapter-path "." 
      --logger "xunit;LogFilePath=TodoWebApp.IntegrationTests.xunit.xml" 
      /p:CollectCoverage=True 
      /p:CoverletOutputFormat=opencover 
      /p:CoverletOutput="TodoWebApp.IntegrationTests.opencover.xml" 
      /p:Exclude="[xunit.*]*"
    displayName: Run integration tests
    name: run_integration_tests
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)    
    enabled: True

  # Publish test results.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-test-results?view=vsts&tabs=yaml.
  - task: PublishTestResults@2
    displayName: Publish test results
    name: publish_test_results
    enabled: True
    inputs:
      testResultsFormat: 'xUnit'
      testResultsFiles: '$(Build.SourcesDirectory)/Tests/**/*.xunit.xml'
      mergeTestResults: True
      buildConfiguration: ${{ parameters.build.configuration }}
      publishRunAttachments: True

  # Install reportgenerator tool to be able to generate code coverage related reports.
  - script: >-
      dotnet tool install dotnet-reportgenerator-globaltool 
      --global 
      --version $(ReportGenerator_Version)
    displayName: Install code coverage report generator tool
    name: install_code_coverage_report_generator
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)    
    enabled: True

  # Generate code coverage report:
  #   - combine several OpenCover coverag data files into one single file in Cobertura format
  #   - generate coverage HTML report ready to be displayed by Azure DevOps
  # See more here: https://github.com/danielpalme/ReportGenerator#usage.
  # See more about the output formats here: https://github.com/danielpalme/ReportGenerator/wiki/Output-formats.
  # In order to be able to see the report inside the Code Coverage tab on Azure DevOps, 
  # enable Azure Boards for your project, as documented here: https://developercommunity.visualstudio.com/solutions/403137/view.html.
  - script: >-
      reportgenerator 
      "-reports:$(Build.SourcesDirectory)/Tests/**/*.opencover.xml" 
      "-targetdir:$(Build.SourcesDirectory)/.CoverageResults/Report" 
      "-reporttypes:Cobertura;HtmlInline_AzurePipelines;Badges"
    displayName: Generate code coverage report
    name: generate_code_coverage_report
    enabled: True

  # Publish code coverage report.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/test/publish-code-coverage-results?view=vsts.
  - task: PublishCodeCoverageResults@1
    displayName: Publish code coverage report
    name: publish_code_coverage_report
    enabled: True
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/.CoverageResults/Report/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/.CoverageResults/Report'

  # Upload SonarQube report to external service, SonarCloud.
  # See more here: https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner+for+MSBuild.
  - script: >-
      dotnet-sonarscanner end  
      /d:sonar.login="$(SonarLogin)"
    displayName: Upload SonarQube report
    name: upload_sonarqube_report
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: $(DotNetSkipFirstTimeExperience)
      DOTNET_CLI_TELEMETRY_OPTOUT: $(DotNetCliTelemetryOptOut)
      COREHOST_TRACE: $(CoreHostTrace)    
    enabled: ${{ parameters.sonar.enabled }}