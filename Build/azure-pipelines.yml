# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=azure-devops.
# YAML schema reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema.

# Specify build number format.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/run-number?view=azure-devops&tabs=yaml.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  repositories: 
  # See more about repositories here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema%2Cparameter-schema#repository-resource.
  - repository: self
    clean: True
    # The value of the "endpoint" element must match the service connection name 
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'
    # Build multiple branches.
    # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/ci-build-git?view=azure-devops&tabs=yaml.
    trigger:
      branches:
        include:
          - master
          - feature/*
          - bugfix/*
          - hotfix/*
          - release/*

# See more about Azure Pipelines variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=azure-devops&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Load group containing variables applicable to integration tests.
  # This group contains the password to be used when accessing the dockerized database targeted by the integration tests.
  # This password is stored as a secret under the name "IntegrationTests.Database.Todo.Password".
  # See more about secret variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables.
  - group: 'IntegrationTests'

  # Specifies the version of the .NET Core SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet-core.
  - name: 'DotNetCore_SDK_Version'
    value: '3.1.302'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '4.5.8'

  # Represents the name of the database to be targeted by integration tests
  - name: 'IntegrationTests.Database.Todo.Name'
    value: 'todo-db4it'

  # Represents the user used for accessing the database to be targeted by integration tests
  - name: 'IntegrationTests.Database.Todo.Username'
    value: 'satrapu'
    
stages:
  - stage: 'checkout'
    displayName: 'Checkout'
    jobs:
      - job:
        displayName: Checkout source code
        steps:
          - script: echo 'Checking out source code'

  - stage: 'prerequisites'
    displayName: 'Prerequisites'
    dependsOn: 'checkout'
    jobs:
      - job:
        displayName: 'Install prerequisites'
        steps:
          - script: echo 'Installing prerequisites'

  - stage: 'build'
    displayName: 'Build'
    dependsOn: 'prerequisites'
    jobs:
      - job:
        displayName: 'Build web API'
        steps:
          - script: echo 'Building ASP.NET Core web API'

  - stage: 'test'
    displayName: 'Run Tests'
    dependsOn: 'build'
    jobs:
      - job:
        displayName: Run unit tests
        steps:
          - script: echo 'Running unit tests'
      - job:
        displayName: Run integration tests
        steps:
          - script: echo 'Running integration tests'

  - stage: 'code_quality'
    displayName: 'Ensure Code Quality'
    dependsOn: 'test'
    jobs:
    - job:
      displayName: Run Sonar
      steps:
        - script: echo 'Running Sonar analysis'

