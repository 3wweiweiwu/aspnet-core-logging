# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core?view=vsts.
# YAML schema reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema.

# Specify build number format.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=vsts&tabs=yaml#build-number-format.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  containers:
  # Specify the Docker container hosting the database to be used when running integration tests.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/service-containers?view=azure-devops&tabs=yaml#single-job.
  - container: postgres11_2_alpine_linux_for_integration_tests
    image: postgres:11.2-alpine
    ports:
    # The container port will be mapped to a random host port; the host port can be fetched via the variable: 'agent.services.<serviceName>.ports.<port>'.
    # Given the YAML frament declaring the 'postgres4it' service using the 'postgres11_2_for_integration_tests' Docker container:
    #
    #   services:
    #     postgres4it: postgres11_2_for_integration_tests
    #
    # Then the variable to be used for fetching the host port is: $(Agent.Services.Postgres4IT.Ports.5432); lower or upper casing does not matter.
    - 5432:5432/tcp
    env:
      POSTGRES_DB: db
      POSTGRES_USER: service.azuredevops
      POSTGRES_PASSWORD: 62u5Xg3I55J0l5hx3iqJ43f5T1Mo3Wri

  - container: postgres11_windows_server_core_for_integration_tests
    image: stellirin/postgres-windows:11
    ports:
    - 5432:5432/tcp
    env:
      POSTGRES_DB: db
      POSTGRES_USER: service.azuredevops
      POSTGRES_PASSWORD: 62u5Xg3I55J0l5hx3iqJ43f5T1Mo3Wri

  repositories: 
  # See more about repositories here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#repository.
  - repository: 'aspnet_core_logging'
    type: 'github'
    name: 'satrapu/aspnet-core-logging'
    clean: True
    # The value of the "endpoint" element must match the service connection name 
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'

# Build multiple branches.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/ci-build-git?view=vsts&tabs=yaml.
trigger:
 - master
 - feature/*
 - bugfix/*
 - hotfix/*
 - release/*

# See more about Azure Pipelines variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=vsts&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Specifies the version of the .NET Core SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet-core.
  - name: 'DotNetCore_SDK_Version'
    value: '2.2.203'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '4.1.4'

  # Specifies the version of the SonarQube scanner to use when performing statically analysis against this project.
  # All releases can be found here: https://github.com/SonarSource/sonar-scanner-msbuild/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/dotnet-sonarscanner/.
  - name: 'SonarScanner_Version'
    value: '4.6.0'

  # Avoid caching NuGet packages each time a build runs on an Azure DevOps agent.
  # See more here: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds.
  - name: 'DotNetSkipFirstTimeExperience'
    value: 1

  # Disable .NET Core telemetry.
  # See more here: https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out.
  - name: 'DotNetCliTelemetryOptOut'
    value: 1

  # Disable Core CLR tracing.
  - name: 'CoreHostTrace'
    value: 0

  # Represents the key of the project hosted on SonarCloud
  - name: 'CurrentProject.Sonar.ProjectKey'
    value: 'aspnet-core-logging'

# Define multiple jobs, one per supported OS.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/multiple-phases?tabs=yaml&view=azure-devops.
#
# Will use job templates, since all supported operating systems will run the same job.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#job-templates
# and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops.
jobs:
- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'linux'
      displayName: 'Build on Linux'
    pool:
      # Need a VM capable of running Linux containers
      vmImage: 'ubuntu-16.04'
    containers:
      db4it: 'postgres11_2_alpine_linux_for_integration_tests'
    sonar:
      enabled: False
      buildBreaker:
        enabled: False

#- template: './azure-pipelines.job-template.yml'
#  parameters:
#    job:
#      name: 'macOS'
#      displayName: 'Build on macOS'
#    pool:
#      vmImage: 'macOS-10.14'
#    sonar:
#      enabled: False
#      buildBreaker:
#        enabled: False

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'windows'
      displayName: 'Build on Windows'
    pool:
      # Need a VM capable of running Windows containers
      vmImage: 'win1803'
    containers:
      db4it: 'postgres11_windows_server_core_for_integration_tests'
    sonar:
      enabled: True
      buildBreaker:
        enabled: True