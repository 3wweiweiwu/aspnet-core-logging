# Build ASP.NET Core project using Azure Pipelines.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=azure-devops.
# YAML schema reference: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema.

# Specify build number format.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/options?view=azure-devops&tabs=yaml#build-number-format.
name: '$(SourceBranchName)_$(Date:yyyyMMdd).$(Rev:rrr)'

resources:
  repositories: 
  # See more about repositories here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=vsts&tabs=schema#repository.
  - repository: 'aspnet_core_logging'
    type: 'github'
    name: 'satrapu/aspnet-core-logging'
    clean: True
    # The value of the "endpoint" element must match the service connection name 
    # declared in Project Settings -> Service connections section of your Azure DevOps organization.
    endpoint: 'satrapu'

# Build multiple branches.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/build/ci-build-git?view=vsts&tabs=yaml.
trigger:
 - master
 - feature/*
 - bugfix/*
 - hotfix/*
 - release/*

# See more about Azure Pipelines variables here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=vsts.
variables:
  # Load group containing variables applicable to all pipelines belonging to this project.
  - group: 'GlobalVariables'

  # Load SonarQube related variable group.
  # See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/library/variable-groups?view=vsts&tabs=yaml#use-a-variable-group.
  # Be sure to link this group to this pipeline by selecting the latter -> Edit -> Variables -> Variable Groups!
  - group: 'SonarQube'

  # Specifies the version of the .NET Core SDK to install and use when running this pipeline.
  # All releases can be found here: https://dotnet.microsoft.com/download/dotnet-core.
  - name: 'DotNetCore_SDK_Version'
    value: '2.2.300'

  # Specifies the version of the ReportGenerator tool used for generating code coverage reports.
  # All releases can be found here: https://github.com/danielpalme/ReportGenerator/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/ReportGenerator/.
  - name: 'ReportGenerator_Version'
    value: '4.1.10'

  # Specifies the version of the SonarQube scanner to use when performing statically analysis against this project.
  # All releases can be found here: https://github.com/SonarSource/sonar-scanner-msbuild/releases.
  # All NuGet packages can be found here: https://www.nuget.org/packages/dotnet-sonarscanner/.
  - name: 'SonarScanner_Version'
    value: '4.6.2'

  # Specify the Docker version to install used for running the databases targeted by the integration tests.
  # The stable versions can be found here: https://download.docker.com; mac OS related stable versions 
  # can be found here: https://download.docker.com/mac/static/stable/x86_64/.
  - name: 'Docker_Version'
    value: '18.09.6'

  # Avoid caching NuGet packages each time a build runs on an Azure DevOps agent.
  # See more here: http://donovanbrown.com/post/Stop-wasting-time-during-NET-Core-builds.
  - name: 'DotNetSkipFirstTimeExperience'
    value: 1

  # Disable .NET Core telemetry.
  # See more here: https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#how-to-opt-out.
  - name: 'DotNetCliTelemetryOptOut'
    value: 1

  # Disable Core CLR tracing.
  - name: 'CoreHostTrace'
    value: 0

  # Represents the key of the project hosted on SonarCloud.
  - name: 'CurrentProject.Sonar.ProjectKey'
    value: 'aspnet-core-logging'

  # Specifies the name of the database to be targeted by integration tests.
  - name: DB4IT_Name
    value: 'todo'

  # Specifies the user who owns the database to be targeted by integration tests. 
  - name: DB4IT_Username
    value: 'satrapu'

# Define multiple jobs, one per supported operating system (Linux, macOS and Windows).
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/multiple-phases?tabs=yaml&view=azure-devops.
#
# The list of virtual machine images used for running these operating systems can be found here: 
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml#use-a-microsoft-hosted-agent.
#
# Will use job templates, since all supported operating systems will run the same job.
# See more here: https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=example#job-templates
# and here: https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops.
jobs:
- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'linux'
      displayName: 'Build on Linux'
    pool:
      vmImage: 'ubuntu-16.04'
    db4it:
      dockerImage: 'postgres'
      dockerTag: '11.3-alpine'

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'macOS'
      displayName: 'Build on macOS'
    pool:
      vmImage: 'macOS-10.14'
    docker:
      # Linux and Windows virtual machines already have Docker installed, so only the one running macOS must install it.
      install: True
    db4it:
      dockerImage: 'postgres'
      dockerTag: '11.3-alpine'    

- template: './azure-pipelines.job-template.yml'
  parameters:
    job:
      name: 'windows'
    displayName: 'Build on Windows'
    pool:
      vmImage: 'windows-2019'
    db4it:
      dockerImage: 'stellirin/postgres-windows'
      dockerTag: '11.3'
    sonar:
      enabled: True
      buildBreaker:
        enabled: True